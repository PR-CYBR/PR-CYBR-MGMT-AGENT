name: OpenAI Function Integration

on:
  workflow_dispatch:
    inputs:
      function_name:
        description: 'Name of the OpenAI function to call'
        required: true
      parameters:
        description: 'Parameters for the function call in JSON format'
        required: false
  push:
    branches:
      - main

jobs:
  call_openai_function:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Call OpenAI Function
        id: openai_call
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
        run: |
          python -c "
          import openai
          import json

          openai.api_key = '${{ secrets.OPENAI_API_KEY }}'

          function_name = '${{ github.event.inputs.function_name }}'
          parameters = json.loads('${{ github.event.inputs.parameters }}' or '{}')

          function_call = {
              'name': function_name,
              'parameters': parameters
          }

          response = openai.ChatCompletion.create(
              model='gpt-4o-mini',
              assistant_id='${{ secrets.ASSISTANT_ID }}',
              messages=[
                  {'role': 'user', 'content': f'Execute function {function_name}.'}
              ],
              functions=[function_call],
              function_call='auto'
          )
          print(response)
          with open('response.json', 'w') as f:
              json.dump(response, f)
          "

      - name: Retrieve Knowledge and Update README
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
        run: |
          python -c "
          import openai
          import json

          openai.api_key = '${{ secrets.OPENAI_API_KEY }}'

          # Retrieve knowledge from the assistant's vector store
          knowledge_response = openai.ChatCompletion.create(
              model='gpt-4o-mini',
              assistant_id='${{ secrets.ASSISTANT_ID }}',
              messages=[
                  {'role': 'user', 'content': 'What is the current status or recent updates about your capabilities?'}
              ]
          )
          knowledge_content = knowledge_response['choices'][0]['message']['content']
          print(knowledge_content)

          # Update README.md
          with open('README.md', 'a') as readme_file:
              readme_file.write('\n## OpenAI Function Status\n\n')
              readme_file.write(knowledge_content)
          "

      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update README with OpenAI function call status and knowledge"
          git push