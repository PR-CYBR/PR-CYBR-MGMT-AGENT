#!/usr/bin/env python3
"""Codex orchestration CLI stub for PR-CYBR management agent.

This utility analyses event payloads and determines which downstream
agent repositories should receive orchestration events. Results are
written to stdout as JSON and each invocation is logged for auditing.
"""

from __future__ import annotations

import argparse
import json
import sys
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, Dict, List

ROUTING_TABLE = {
    "security_alert": ["PR-CYBR-SECURITY-AGENT"],
    "data_sync": ["PR-CYBR-DATA-INTEGRATION-AGENT"],
    "maintenance": ["PR-CYBR-MGMT-AGENT"],
}

LOG_PATH = Path("logs/codex_dispatch.log")


def load_payload(source: argparse.Namespace) -> Dict[str, Any]:
    """Load the JSON payload from stdin or an optional file."""

    if source.payload_file:
        payload_text = Path(source.payload_file).read_text(encoding="utf-8")
    else:
        payload_text = sys.stdin.read().strip()

    if not payload_text:
        return {}

    try:
        return json.loads(payload_text)
    except json.JSONDecodeError as exc:  # pragma: no cover - explicit failure path
        raise SystemExit(f"Invalid JSON payload: {exc}") from exc


def determine_agents(payload: Dict[str, Any]) -> List[str]:
    """Return the list of agents that should be notified."""

    event_type = payload.get("event_type") or payload.get("type")
    if not event_type:
        return []

    return ROUTING_TABLE.get(str(event_type), [])


def write_log(entry: Dict[str, Any]) -> None:
    """Append the dispatch entry to the log file."""

    LOG_PATH.parent.mkdir(parents=True, exist_ok=True)
    with LOG_PATH.open("a", encoding="utf-8") as log_file:
        log_file.write(json.dumps(entry) + "\n")


def run(args: argparse.Namespace) -> int:
    payload = load_payload(args)
    agents = determine_agents(payload)

    result: Dict[str, Any] = {
        "status": "success",
        "agents": agents,
        "event_type": payload.get("event_type") or payload.get("type"),
        "received_at": datetime.now(timezone.utc).isoformat(),
    }

    print(json.dumps(result, indent=2, sort_keys=True))

    log_entry = {
        "timestamp": result["received_at"],
        "payload": payload,
        "dispatched_agents": agents,
    }
    write_log(log_entry)

    if args.output:
        Path(args.output).write_text(json.dumps(result), encoding="utf-8")

    return 0


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="PR-CYBR Codex CLI stub")
    subparsers = parser.add_subparsers(dest="command", required=True)

    analyze = subparsers.add_parser("analyze", help="Analyze an event payload")
    analyze.add_argument(
        "--payload-file",
        dest="payload_file",
        help="Optional path to a JSON file containing the event payload.",
    )
    analyze.add_argument(
        "--output",
        dest="output",
        help="Optional path where the analysis result JSON should be saved.",
    )
    analyze.set_defaults(func=run)

    return parser


def main(argv: List[str] | None = None) -> int:
    parser = build_parser()
    args = parser.parse_args(argv)

    if not hasattr(args, "func"):
        parser.print_help()
        return 1

    return args.func(args)


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    sys.exit(main())
